<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Buffer Object - Definition &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The Buffer object encapsulates a block of memory for use with advanced techniques such as DllCall, structures, StrPut and raw file I/O." />
<meta name="ahk:equiv-v1" content="commands/VarSetCapacity.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Buffer Object</h1>
<pre class="NoIndent">class Buffer extends Object</pre>

<p>Encapsulates a block of memory for use with advanced techniques such as DllCall, structures, StrPut and raw file I/O.</p>
<p>Buffer objects are typically created by calling <a href="../commands/BufferAlloc.htm">BufferAlloc</a>, but can also be returned by <a href="../commands/FileRead.htm">FileRead</a> with the "RAW" option.</p>
<pre>Buffer := BufferAlloc(ByteCount)</pre>
<p><a href="../commands/ClipboardAll.htm">ClipboardAll</a> returns a sub-type of Buffer, also named ClipboardAll.</p>
<pre>class ClipboardAll extends Buffer</pre>

<p>"BufferObj" is used below as a placeholder for any Buffer object, as "Buffer" is the class itself.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, Buffer objects have the following predefined properties:</p>

<p><strong>Properties:</strong></p>
<ul>
  <li><a href="#Ptr">Ptr</a></li>
  <li><a href="#Size">Size</a></li>
</ul>

<h2 id="like">Buffer-like Objects</h2>
<p>Some built-in functions accept a Buffer object in place of an address - see the <a href="#Related">Related</a> section for links. These functions also accept any other object which has <a href="#Ptr">Ptr</a> and <a href="#Size">Size</a> properties, but are optimized for the native Buffer object.</p>
<p>In most cases, passing a Buffer object is safer than passing an address, as the function can read the <a href="#Size">buffer size</a> to ensure that it does not attempt to access any memory location outside of the buffer. One exception is that <a href="../commands/DllCall.htm">DllCall</a> calls functions outside of the program; in those cases, it may be necessary to explicitly pass the <a href="#Size">buffer size</a> to the function.</p>

<h2 id="Properties">Properties</h2>
<div class="methodShort" id="Ptr"><h2>Ptr</h2>
<p>Retrieves the buffer's current memory address.</p>
<pre class="Syntax">Ptr := BufferObj.Ptr</pre>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>Any address returned by this property becomes invalid when the buffer is freed or reallocated. Invalid addresses must not be used. The buffer is not freed until the Buffer object's <a href="../Objects.htm#Reference_Counting">reference count</a> reaches zero, but it is reallocated when its <a href="#Size">Size</a> is changed.</p>
</div>

<div class="methodShort" id="Size"><h2>Size</h2>
<p>Retrieves or sets the buffer's size, in bytes.</p>
<pre class="Syntax">ByteCount := BufferObj.Size</pre>
<pre class="Syntax">BufferObj.Size := ByteCount</pre>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>The buffer's address typically changes whenever its size is changed. If the size is decreased, the data within the buffer is truncated, but the remaining bytes are preserved. If the size is increased, all data is preserved and the values of any new bytes are arbitrary (they are not initialized, for performance reasons).</p>
<p>This property always returns the exact value it was given either by <a href="../commands/BufferAlloc.htm">BufferAlloc</a> or by a previous assignment.</p>
</div>

<h2 id="Related">Related</h2>
<p><a href="../commands/BufferAlloc.htm">BufferAlloc</a>, <a href="../commands/DllCall.htm">DllCall</a>, <a href="../commands/NumPut.htm">NumPut</a>, <a href="../commands/NumGet.htm">NumGet</a>, <a href="../commands/StrPut.htm">StrPut</a>, <a href="../commands/StrGet.htm">StrGet</a>, <a href="File.htm#RawRead">File.RawRead</a>, <a href="File.htm#RawWrite">File.RawWrite</a>, <a href="../commands/ClipboardAll.htm">ClipboardAll</a></p>

</body>
</html>
