<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="Object is the basic class from which other AutoHotkey object classes derive." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Object</h1>
<pre class="NoIndent">class Object extends Any</pre>

<p><strong>Object</strong> is the basic class from which other AutoHotkey object classes derive. Each instance of Object consists of the following:</p>
<ul>
  <li>Own properties: a set of properties which belong to this specific Object.</li>
  <li>Own methods: a set of methods which belong to this specific Object.</li>
  <li>A base object, from which properties and methods are inherited.</li>
</ul>
<p>There are value properties and dynamic properties. Value properties simply contain a value. Dynamic properties do not contain a value, but instead call a <em>getter</em> or <em>setter</em> function when accessed. The <em>getter</em> or <em>setter</em> can be overridden by a derived object (the easiest way is to define them within a class).</p>
<p>"Obj" is used below as a placeholder for any instance of the Object class.</p>
<p>All instances of Object are based on <code>Object.Prototype</code>, which is based on <code>Any.Prototype</code>. In addition to the methods and property inherited from <a href="Any.htm">Any</a>, Objects have the following predefined methods and properties:</p>
<p><strong>Methods:</strong></p>
<ul>
	<li><a href="#Clone">Clone</a></li>
  <li><a href="#DefineMethod">DefineMethod</a></li>
  <li><a href="#DefineProp">DefineProp</a></li>
  <li><a href="#DeleteMethod">DeleteMethod</a></li>
  <li><a href="#DeleteProp">DeleteProp</a></li>
  <li><a href="#GetOwnPropDesc">GetOwnPropDesc</a></li>
  <li><a href="#HasOwnMethod">HasOwnMethod</a></li>
  <li><a href="#HasOwnProp">HasOwnProp</a></li>
  <li><a href="#OwnMethods">OwnMethods</a></li>
  <li><a href="#OwnProps">OwnProps</a></li>
</ul>
<p><strong>Properties:</strong></p>
<ul>
	<li><a href="#Base">Base</a></li>
</ul>
<p><strong>Functions:</strong></p>
<ul>
  <li><a href="#Object">Object</a>: Creates an Object from a list of property "name, value" pairs.</li>
	<li><a href="#SetBase">ObjSetBase</a>: Set the object's <a href="../Objects.htm#delegation">base object</a>.</li>
  <li><a href="#GetCapacity">ObjGetCapacity</a>, <a href="#SetCapacity">ObjSetCapacity</a>: Retrieve or set an Object's capacity to contain properties.</li>
  <li><a href="#OwnPropCount">ObjOwnPropCount</a>: Retrieve the number of own properties contained by an object.</li>
  <li>ObjHasOwnProp, ObjOwnMethods, ObjOwnProps: Equivalent to the corresponding predefined method, but cannot be overridden.</li>
</ul>

<h2 id="Methods">Methods</h2>

<div class="methodShort" id="Clone"><h2>Clone</h2>
<p>Returns a shallow copy of the object.</p>
<pre class="Syntax">Clone := Obj.<span class="func">Clone</span>()</pre>
<p>Each property or method owned by the object is copied into the clone. Object <em>references</em> are copied (like with a normal assignment), not the objects themselves; in other words, if a property contains a reference to an object, the clone will contain a reference to the same object.</p>
<p>Dynamic properties are copied, not invoked.</p>
<p>The clone has the same base object as the original object.</p>
</div>

<div class="methodShort" id="DefineMethod"><h2>DefineMethod</h2>
<p>Defines a new method.</p>
<pre class="Syntax">Obj.<span class="func">DefineMethod</span>(Name, MethodFunc)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name of the method.</p>
  </dd>
  <dt>MethodFunc</dt>
  <dd>
    <p>Type: <a href="Functor.htm">Function Object</a></p>
    <p>The implementation of the method. The function must accept at least one parameter, which receives a reference to the target object of the method call. This parameter is defined automatically with the name <code>this</code> when the method is created by a class definition.</p>
  </dd>
  <dt>Return Value</dt>
  <dd>
    <p>The target object (<em>Obj</em>).</p>
  </dd>
</dl>
<p>The new method is owned by <em>Obj</em>, but may be inherited by any objects which use <em>Obj</em> as a base. If <em>Obj</em> is a class, the new method only applies to the class itself and subclasses (i.e. it is static). To define a method for all instances of a class, let <em>Obj</em> be the class's <code>Prototype</code>.</p>
</div>

<div class="methodShort" id="DefineProp"><h2>DefineProp</h2>
<p>Defines a new own property.</p>
<pre class="Syntax">Obj.<span class="func">DefineProp</span>(Name, Desc)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name of the property.</p>
  </dd>
  <dt>Desc</dt>
  <dd>
    <p>Type: Object</p>
    <p>An object with one of the following own properties, or both <em>Get</em> and <em>Set</em>:</p>
    <p><code>Get</code>: The <a href="Functor.htm">function object</a> to call when the property's value is retrieved.</p>
    <p><code>Set</code>: The <a href="Functor.htm">function object</a> to call when the property is assigned a value. Its second parameter is the value being assigned.</p>
    <p><code>Value</code>: Any value to assign to the property.</p>
  </dd>
  <dt>Return Value</dt>
  <dd>
    <p>The target object (<em>Obj</em>).</p>
  </dd>
</dl>
<p>This method can be used to convert a value property to a dynamic property or vice versa, but it is not possible to specify both a value and a getter/setter.</p>
<p>If only <em>Get</em> or <em>Set</em> is defined, its counterpart can be inherited from a base object. If <em>Get</em> is undefined, the property can return a value inherited from a base. If <em>Set</em> is undefined in this and all base objects, the property is read-only (attempting to set the property throws an exception).</p>
<p>As with methods, the first parameter of <em>Get</em> or <em>Set</em> is <code>this</code> (the target object). For <em>Set</em>, the second parameter is <code>value</code> (the value being assigned). These parameters are defined automatically by method and property definitions within a class, but must be defined explicitly if using normal functions.</p>
<p>The <code>MaxParams</code> and <code>IsVariadic</code> properties of the function objects are evaluated to determine whether the property may accept parameters. If <code>MaxParams</code> is 1 for <em>get</em> or 2 for <em>set</em> and <code>IsVariadic</code> is false or undefined, the property cannot accept parameters; they are instead forwarded to the <a href="../Objects.htm#__Item">__Item</a> property of the object returned by <em>get</em>.</p>
</div>

<div class="methodShort" id="DeleteMethod"><h2>DeleteMethod</h2>
<p>Removes an own method from the object.</p>
<pre class="Syntax">Obj.<span class="func">DeleteMethod</span>(Name)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>A method name. If the object does not own a method by this name, a <a href="Error.htm#MethodError">MethodError</a> is thrown.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="DeleteProp"><h2>DeleteProp</h2>
<p>Removes an own property from the object.</p>
<pre class="Syntax">Obj.<span class="func">DeleteProp</span>(Name)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>A property name.</p>
  </dd>
  <dt>Return Value</dt>
  <dd><p>The value of the removed property (blank if none).</p></dd>
</dl>
</div>

<div class="methodShort" id="GetOwnPropDesc"><h2>GetOwnPropDesc</h2>
<p>Returns a descriptor for a given own property, compatible with <a href="#DefineProp">DefineProp</a>.</p>
<pre class="Syntax">Obj.<span class="func">GetOwnPropDesc</span>(Name)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>A property name.</p>
  </dd>
  <dt>Return Value</dt>
  <dd>
    <p>Type: Object</p>
    <p>For a dynamic property, the return value is a new object with one or both of the following own properties:</p>
    <p><code>Get</code>: The <a href="Functor.htm">function object</a> which is called when the property's value is retrieved, if defined in <em>Obj</em>.</p>
    <p><code>Set</code>: The <a href="Functor.htm">function object</a> which is called when the property is assigned a value, if defined in <em>Obj</em>.</p>
    <p>For a value property, the return value is a new object with a property named <code>Value</code>. In such cases, <code>Obj.GetOwnPropDesc(Name).Value == Obj.%Name%</code>.</p>
  </dd>
</dl>
<p></p>
<p>Modifying the returned object has no effect on <em>Obj</em> unless <a href="#DefineProp">DefineProp</a> is called.</p>
<p>A <a href="Error.htm#PropertyError">PropertyError</a> is thrown if <em>Obj</em> does not own a property by that name. The script can determine whether a property is dynamic by checking <code>not desc.HasProp("Value")</code>, where <em>desc</em> is the return value of GetOwnPropDesc.</p>
</div>

<div class="methodShort" id="HasOwnMethod"><h2>HasOwnMethod</h2>
<pre class="Syntax">Obj.<span class="func">HasOwnMethod</span>(Name)</pre>
<p>Returns true if the object owns a method by this name, otherwise false.</p>
</div>

<div class="methodShort" id="HasOwnProp"><h2>HasOwnProp</h2>
<pre class="Syntax">Obj.<span class="func">HasOwnProp</span>(Name)</pre>
<p>Returns true if the object owns a property by this name, otherwise false.</p>
<p>The default implementation of this method is also defined as a function: <code>ObjHasOwnProp(Obj, Name)</code>.</p>
</div>

<div class="methodShort" id="OwnMethods"><h2>OwnMethods</h2>
<p>Enumerates the object's own methods.</p>
<pre class="Syntax">For Name <span class="optional">, MethodFunc</span> in Obj.<span class="func">OwnMethods</span>()</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a>. The enumerator is typically passed directly to a <a href="../commands/For.htm">for-loop</a>, which calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next method name and/or implementation function. The for-loop's variables correspond to the enumerator's parameters, which are:</p>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The method's name.</p>
  </dd>
  <dt>MethodFunc</dt>
  <dd>
    <p>Type: <a href="Functor.htm">Function Object</a></p>
    <p>The implementation of the method. This is either a <a href="Func.htm">Func</a> created by a class definition or an object previously passed to <a href="#DefineMethod">DefineMethod</a>.</p>
  </dd>
</dl>
<p>The default implementation of this method is also defined as a function: <code>ObjOwnMethods(Obj)</code>.</p>
</div>

<div class="methodShort" id="OwnProps"><h2>OwnProps</h2>
<p>Enumerates the object's own properties.</p>
<pre class="Syntax">For Name <span class="optional">, Value</span> in Obj.<span class="func">OwnProps</span>()</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a>. The enumerator is typically passed directly to a <a href="../commands/For.htm">for-loop</a>, which calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next property name and/or value. The for-loop's variables correspond to the enumerator's parameters, which are:</p>
<dl>
  <dt>Name</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The property's name.</p>
  </dd>
  <dt>Value</dt>
  <dd>
    <p>The property's value.</p>
    <p>If the property has a getter method, it is called to obtain the value (unless <em>Value</em> is omitted).</p>
  </dd>
</dl>
<p>Dynamic properties are included in the enumeration. However:</p>
<ul>
  <li>Since only the object's own properties are enumerated, the property must be defined directly in <em>Obj</em>.</li>
  <li>If only the first variable was specified, the property's name is returned and its getter is not called.</li>
  <li>If two variables were specified, the enumerator attempts to call the property's getter to retrieve the value.
    <ul>
      <li>If the getter requires parameters, the property is skipped.</li>
      <li>If <em>Obj</em> contains only a setter and not a getter for this property, it is skipped.</li>
      <li>If <em>Obj</em> is a class prototype object, the getter should not (and in some cases cannot) be called; so the property is skipped.</li>
      <li>If the getter throws an exception, it is propagated (not suppressed). The caller can continue enumeration at the next property only if it retained a reference to the enumerator (i.e. not if it passed the enumerator directly to a for-loop, since in that case the enumerator is freed when the for-loop aborts).</li>
    </ul>
  </li>
</ul>
<p>To enumerate own properties without calling property getters, pass only a single variable to the for-loop or enumerator. <a href="#GetOwnPropDesc">GetOwnPropDesc</a> can be used to differentiate value properties from dynamic properties, while also retrieving the value or getter/setter.</p>
<p>The default implementation of this method is also defined as a function: <code>ObjOwnProps(Obj)</code>.</p>
</div>

<h2 id="Properties">Properties</h2>

<div class="methodShort" id="Base"><h2>Base</h2>
<p>Retrieves or sets the object's <a href="../Objects.htm#delegation">base object</a>.</p>
<pre class="Syntax">BaseObj := Obj.Base</pre>
<pre class="Syntax">Obj.Base := BaseObj</pre>
<p><em>BaseObj</em> must be an Object.</p>
<p>If assigning the new base would change the native type of the object, an exception is thrown. An object's native type is decided by the nearest prototype object belonging to a built-in class, such as <code>Object.Prototype</code> or <code>Array.Prototype</code>. For example, an instance of Array must always derive from <code>Array.Prototype</code>, either directly or indirectly.</p>
<p>Properties and methods are inherited from the base object dynamically, so changing an object's base also changes which inherited properties and methods are available.</p>
<p>This property is inherited from <a href="Any.htm">Any</a>; however, it can be set only for instances of Object.</p>
<p>See also: <a href="Any.htm#GetBase">ObjGetBase</a>, <a href="#SetBase">ObjSetBase</a></p>
</div>

<h2 id="Functions">Functions</h2>

<div class="methodShort" id="Object"><h2>Object</h2>
<p>Creates an Object from a list of property "name, value" pairs.</p>
<pre class="Syntax">Obj := <span class="func">Object</span>(<span class="optional">Name, Value, Name2, Value2, ...</span>)</pre>
<p>This is equivalent to creating an object with <code>Obj := Object()</code> and setting each property with <code>Obj.%Name% := Value</code>.</p>
<p>If a function with this name is defined in the script, any object literals (such as <code>{}</code>) within the same scope will produce calls to that function instead of the default Object function. Property names within an object literal are not quoted, so for example, <code>{a: b}</code> is equivalent to <code>Object("a", b)</code>.</p>
</div>

<div class="methodShort" id="SetBase"><h2>ObjSetBase</h2>
<p>Sets the object's <a href="../Objects.htm#delegation">base object</a>.</p>
<pre class="Syntax"><span class="func">ObjSetBase</span>(Obj, BaseObj)</pre>
<p>No <a href="../Objects.htm#Meta_Functions">meta-functions</a> or <a href="../Objects.htm#Custom_Classes_property">property functions</a> are called. Overriding the <a href="#Base">Base</a> property does not affect the behaviour of this function.</p>
<p>An exception is thrown if <em>Obj</em> or <em>BaseObj</em> is of an incorrect type.</p>
<p>See also: <a href="Any.htm#GetBase">ObjGetBase</a>, <a href="#Base">Base property</a></p>
</div>

<div class="methodShort" id="OwnPropCount"><h2>ObjOwnPropCount</h2>
<p>Returns the number of properties owned by an object.</p>
<pre class="Syntax">Count := <span class="func">ObjOwnPropCount</span>(Obj)</pre>
</div>

<div class="methodShort" id="SetCapacity"><h2>ObjSetCapacity</h2>
<p>Sets the current capacity of the object's internal array of own properties.</p>
<pre class="Syntax"><span class="func">ObjSetCapacity</span>(Obj, MaxProps)</pre>
<dl>
	<dt>MaxProps</dt>
	<dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The new capacity. If less than the current number of own properties, that number is used instead, and any unused space is freed.</p>
  </dd>
	<dt>Return Value</dt>
	<dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The new capacity.</p>
  </dd>
</dl>
<p>An exception is thrown if <em>Obj</em> is of an incorrect type.</p>
</div>

<div class="methodShort" id="GetCapacity"><h2>ObjGetCapacity</h2>
<pre class="Syntax">MaxItems := <span class="func">ObjGetCapacity</span>(Obj)</pre>
<dl>
	<dt>Return Value</dt>
	<dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The current capacity of the object's internal array of properties.</p>
  </dd>
</dl>
<p>An exception is thrown if <em>Obj</em> is of an incorrect type.</p>
</div>

</body>
</html>
