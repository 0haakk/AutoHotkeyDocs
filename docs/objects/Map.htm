<!DOCTYPE HTML>
<html lang="en">
<head>
<title>Map Object - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="A Map object associates or maps one set of values, called keys, to another set of values." />
<meta name="ahk:equiv-v1" content="objects/Object.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Map Object</h1>
<pre class="NoIndent">class Map extends Object</pre>

<p>A <strong>Map</strong> object associates or <em>maps</em> one set of values, called <em>keys</em>, to another set of values. A key and the value it is mapped to are known as a key-value pair. A map can contain any number of key-value pairs, but each key must be unique.</p>
<p>A key may be any <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a> reference or null-terminated <a href="../Concepts.htm#strings">String</a>. Comparison of string keys is case-sensitive, while objects are compared by reference/address. <a href="../Concepts.htm#numbers">Float</a> keys are automatically converted to String.</p>
<p>The simplest use of a map is to retrieve or set a key-value pair via the implicit <a href="#__Item">__Item</a> property, by simply writing the key between brackets following the map object. For example:</p>
<pre>clrs := Map()
clrs["Red"] := "ff0000"
clrs["Green"] := "00ff00"
clrs["Blue"] := "0000ff"
for clr in Array("Blue", "Green")
    MsgBox clrs[clr]
</pre>
<p>"MapObj" is used below as a placeholder for any Map object, as "Map" is the class itself.</p>
<p>In addition to the methods and property inherited from <a href="Object.htm">Object</a>, Map objects have the following predefined methods and properties:</p>

<p><strong>Methods:</strong></p>
<ul>
  <li><a href="#Clear">Clear</a></li>
  <li><a href="#Clone">Clone</a></li>
  <li><a href="#Delete">Delete</a></li>
	<li><a href="#Has">Has</a></li>
  <li><a href="#Set">Set</a></li>
  <li><a href="#__Enum">__Enum</a></li>
</ul>
<p><strong>Properties:</strong></p>
<ul>
  <li><a href="#Count">Count</a></li>
	<li><a href="#Capacity">Capacity</a></li>
  <li><a href="#CaseSense">CaseSense</a></li>
  <li><a href="#__Item">__Item</a></li>
</ul>
<p><strong>Functions:</strong></p>
<ul>
  <li><a href="#Map">Map</a></li>
</ul>

<h2 id="Methods">Methods</h2>

<div class="methodShort" id="Clear"><h2>Clear</h2>
<p>Removes all key-value pairs from the map.</p>
<pre class="Syntax">MapObj.<span class="func">Clear</span>()</pre>
</div>

<div class="methodShort" id="Clone"><h2>Clone</h2>
<p>Returns a shallow copy of the object.</p>
<pre class="Syntax">Clone := MapObj.<span class="func">Clone</span>()</pre>
<p>All key-value pairs are copied to the new map. Object <em>references</em> are copied (like with a normal assignment), not the objects themselves.</p>
<p>Own properties, own methods and base are copied as per <a href="Object.htm#Clone">Obj.Clone</a>.</p>
</div>

<div class="methodShort" id="Delete"><h2>Delete</h2>
<p>Removes a key-value pair from the map.</p>
<pre class="Syntax">MapObj.<span class="func">Delete</span>(Key)</pre>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a> or <a href="../Concepts.htm#strings">String</a></p>
    <p>Any single key. If the map does not contain this key, a <a href="Error.htm#KeyError">KeyError</a> is thrown.</p>
  </dd>
  <dt>Return Value</dt>
  <dd><p>The removed value.</p></dd>
</dl>
</div>

<div class="methodShort" id="Has"><h2>Has</h2>
<p>Returns true if <i>Key</i> has an associated value within the map, otherwise false.</p>
<pre class="Syntax">MapObj.<span class="func">Has</span>(Key)</pre>
</div>

<div class="methodShort" id="Set"><h2>Set</h2>
<p>Sets zero or more items.</p>
<pre class="Syntax">MapObj.<span class="func">Set</span>(<span class="optional">Key, Value, Key2, Value2, ...</span>)</pre>
<p>This is equivalent to setting each item with <code>MapObj[Key] := Value</code>, except that <a href="#__Item">__Item</a> is not called and <a href="#Capacity">Capacity</a> is automatically adjusted to avoid expanding multiple times during a single call.</p>
<p>Returns the map.</p>
</div>

<div class="methodShort" id="__Enum"><h2>__Enum</h2>
<p>Enumerates key-value pairs.</p>
<pre class="Syntax">For Key <span class="optional">, Value</span> in MapObj</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a>. This method is typically not called directly. Instead, the map object is passed directly to a <a href="../commands/For.htm">for-loop</a>, which calls __Enum once and then calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next key and/or value. The for-loop's variables correspond to the enumerator's parameters, which are:</p>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a> or <a href="../Concepts.htm#strings">String</a></p>
    <p>The key.</p>
  </dd>
  <dt>Value</dt>
  <dd>
    <p>The value.</p>
  </dd>
</dl>
</div>

<h2 id="Properties">Properties</h2>

<div class="methodShort" id="Count"><h2>Count</h2>
<p>Retrieves the number of key-value pairs present in the map.</p>
<pre class="Syntax">Count := MapObj.<span class="func">Count</span></pre>
</div>

<div class="methodShort" id="Capacity"><h2>Capacity</h2>
<p>Retrieves or sets the current capacity of the map.</p>
<pre class="Syntax">MapObj.<span class="func">Capacity</span> := MaxItems</pre>
<pre class="Syntax">MaxItems := MapObj.<span class="func">Capacity</span></pre>
<dl>
	<dt>MaxItems</dt>
	<dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The maximum number of key-value pairs the map should be able to contain before it must be automatically expanded.  If setting a value less than the current number of key-value pairs, that number is used instead, and any unused space is freed.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="CaseSense"><h2>CaseSense</h2>
<p>Retrieves or sets the map's case sensitivity setting.</p>
<pre class="Syntax">MapObj.<span class="func">CaseSense</span> := Setting</pre>
<pre class="Syntax">Setting := MapObj.<span class="func">CaseSense</span></pre>
<dl>
	<dt>Setting</dt>
	<dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>One of the following values:</p>
    <p><code>"On"</code>: Key lookups are case sensitive. This is the default setting.</p>
    <p><code>"Off"</code>: The letters A-Z are considered identical to their lowercase counterparts.</p>
    <p><code>"Locale"</code>: Key lookups are case insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also non-ASCII letters like &Auml; and &Uuml; as identical to theirs. <em>Locale</em> is 1 to 8 times slower than <em>Off</em> depending on the nature of the strings being compared.</p>
    <p>When assigning a value, the strings <code>"1"</code> and <code>"0"</code> can also be used.</p>
  </dd>
</dl>
<p>Attempting to assign to this property causes an exception to be thrown if the Map is not empty.</p>
</div>

<div class="methodShort" id="__Item"><h2>__Item</h2>
<p>Retrieves or sets the value of a key-value pair.</p>
<pre class="Syntax">Value := MapObj[Key]</pre>
<pre class="Syntax">MapObj[Key] := Value</pre>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a> or <a href="../Concepts.htm#strings">String</a></p>
    <p>When retrieving a value, <em>Key</em> must be a unique value previously associated with another value. A <a href="Error.htm#KeyError">KeyError</a> is thrown if <em>Key</em> has no associated value within the map.</p>
    <p>When assigning a value, <em>Key</em> can be any value to associate with <em>Value</em>; in other words, the <em>key</em> used to later access <em>Value</em>. <a href="../Concepts.htm#numbers">Float</a> keys are automatically converted to String.</p>
  </dd>
</dl>
<p>The property name __Item is typically omitted, as shown above, but is used when overriding the property.</p>
</div>

<h2 id="Functions">Functions</h2>
<div class="methodShort" id="Map"><h2>Map</h2>
<p>Creates a Map and sets items.</p>
<pre class="Syntax">MapObj := <span class="func">Map</span>(Key1, Value1, Key2, Value2, ...)</pre>
<p>This is equivalent to creating a map with <code>MapObj := Map.new()</code>, setting its initial <a href="#Capacity">Capacity</a>, and then setting each item with <code>MapObj[Key] := Value</code>. Multiple expansions are avoided, but Capacity is not guaranteed to be exact.</p>
</div>

</body>
</html>
