<!DOCTYPE HTML>
<html lang="en">
<head>
<title>InStr - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The InStr function searches for a given occurrence of a string, from the left or the right." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>InStr</h1>

<p>Searches for a given occurrence of a string, from the left or the right.</p>

<pre class="Syntax">FoundPos := <span class="func">InStr</span>(Haystack, Needle <span class="optional">, CaseSense := false, StartingPos := 1, Occurrence := 1</span>)</pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>Haystack</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The string whose content is searched.</p>
  </dd>
  
  <dt>Needle</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The string to search for.</p>
  </dd>
  
  <dt>CaseSense</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a> or <a href="../Concepts.htm#strings">String</a></p>
    <p>One of the following values (defaults to 0 if omitted):</p>
    <p><code>"On"</code> or <code>1</code> (<code>True</code>): The search is case sensitive.</p>
    <p><code>"Off"</code> or <code>0</code> (<code>False</code>): The letters A-Z are considered identical to their lowercase counterparts.</p>
    <p><code>"Locale"</code>: The search is case insensitive according to the rules of the current user's locale. For example, most English and Western European locales treat not only the letters A-Z as identical to their lowercase counterparts, but also non-ASCII letters like &Auml; and &Uuml; as identical to theirs. <em>Locale</em> is 1 to 8 times slower than <em>Off</em> depending on the nature of the strings being compared.</p>
  </dd>

  <dt>StartingPos</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If <em>StartingPos</em> is omitted, it defaults to 1 (the beginning of <em>Haystack</em>). Otherwise, specify 2 to start at the second character, 3 to start at the third, and so on.</p>
    <p>If <em>StartingPos</em> is negative, the search is conducted in reverse (right-to-left), starting at that position from the right. For example, -1 starts at the last character. If <em>StartingPos</em> is 0 or beyond the length of <em>Haystack</em>, 0 is returned.</p>
    <p>Regardless of the value of <em>StartingPos</em>, the return value is always relative to the first character of <em>Haystack</em>. For example, the position of "abc" in "123abc789" is always 4.</p>
  </dd>

  <dt>Occurrence</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>If <em>Occurrence</em> is omitted, it defaults to the first match of the <em>Needle</em> in <em>Haystack</em>. Specify 2 for <em>Occurrence</em> to return the position of the second match, 3 for the third match, etc.</p>
  </dd>

  </dl>
  
<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>This function returns the position of an occurrence of the string <em>Needle</em> in the string <em>Haystack</em>. Position 1 is the first character; this is because 0 is synonymous with "false", making it an intuitive "not found" indicator.</p>
<p>Conventionally, an occurrence of an empty string (<code>""</code>) can be found at any position. However, as a blank <em>Needle</em> would typically only by passed by mistake, it is treated as an error (an exception is thrown).</p>

<h2 id="Remarks">Remarks</h2>
<p><a href="RegExMatch.htm">RegExMatch</a> can be used to search for a pattern (regular expression) within a string, making it much more flexible than InStr. However, InStr is generally faster than RegExMatch when searching for a simple substring.</p>
<p>InStr searches only up to the first binary zero (null-terminator), whereas RegExMatch searches the entire <a href="StrLen.htm">length</a> of the string even if it includes binary zero.</p>

<h2 id="Related">Related</h2>
<p><a href="RegExMatch.htm">RegExMatch</a>, <a href="Is.htm">Is functions</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExRetValue">
<p><a class="ex_number" href="#ExRetValue"></a> Reports the 1-based position of the substring "abc" in the string "123abc789".</p>
<pre>MsgBox InStr("123abc789", "abc") <em>; Returns 4</em></pre>
</div>

<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Searches for <var>Needle</var> in <var>Haystack</var>.</p>
<pre>Haystack := "The Quick Brown Fox Jumps Over the Lazy Dog"
Needle := "Fox"
If InStr(Haystack, Needle)
    MsgBox "The string was found."
Else
    MsgBox "The string was not found."</pre>
</div>

<div class="ex" id="ExCaseSens">
<p><a class="ex_number" href="#ExCaseSens"></a> Demonstrates the difference between a case insensitive and case sensitive search.</p>
<pre>Haystack := "The Quick Brown Fox Jumps Over the Lazy Dog"
Needle := "the"
MsgBox InStr(Haystack, Needle, false, 1, 2) <em>; case insensitive search, return start position of second occurence</em>
MsgBox InStr(Haystack, Needle, true) <em>; case sensitive search, return start position of first occurence, same result as above</em>
</pre>
</div>

</body>
</html>
