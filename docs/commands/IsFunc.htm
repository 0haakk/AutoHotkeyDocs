<!DOCTYPE HTML>
<html lang="en">
<head>
<title>IsFunc - Syntax &amp; Usage | AutoHotkey v2</title>
<meta name="description" content="The IsFunc function returns a non-zero number if the specified function is visible within the current scope." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>IsFunc</h1>

<p>Returns a non-zero number if the specified function is visible within the current scope.</p>

<pre class="Syntax">MinParamsPlus1 := <span class="func">IsFunc</span>(FunctionName)</pre>
<h2 id="Parameters">Parameters</h2>
<dl>

  <dt>FunctionName</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#strings">String</a></p>
    <p>The name of the function whose minimum number of parameters is retrieved. <em>FunctionName</em> must exist explicitly in the script, or be built-in.</p>
  </dd>

</dl>

<h2 id="Return_Value">Return Value</h2>
<p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
<p>This function returns one plus the minimum number of parameters (e.g. 1 for a function that requires zero parameters, 2 for a function that requires 1 parameter, etc.). If <em>FunctionName</em> is not built-in and does not exist explicitly in the script (by means such as <a href="_Include.htm">#Include</a> or a non-dynamic call to a <a href="../Functions.htm#lib">library function</a>), it returns 0.</p>

<h2 id="Remarks">Remarks</h2>
<p>An exception is thrown if <em>FunctionName</em> is an object. To instead determine whether an object appears to be callable, use one of the following:</p>
<ul>
  <li><code>Value.HasMethod("Call")</code> works with all AutoHotkey values and objects by default, but allows HasMethod to be overridden for some objects or classes. For COM objects, this will typically fail (throw an exception or produce the wrong result) unless the COM object is actually an AutoHotkey object from another process.</li>
  <li><code>HasMethod(Value, "Call")</code> works with all AutoHotkey values and objects and cannot be overridden, but will return false if the presence of a <em>Call</em> method cannot be determined (i.e. because <em>Value</em> is a COM object).</li>
</ul>
<p>The search includes all functions visible to the line from which IsFunc was called. For instance, it includes functions which are directly <a href="../Functions.htm#nested">nested inside</a> the current function.</p>

<h2 id="Related">Related</h2>
<p><a href="../Functions.htm#DynCall">Dynamically Calling a Function</a>, <a href="../Objects.htm#Function_References">Function References</a>, <a href="../objects/Func.htm">Func Object</a>, <a href="Func.htm">Func</a>, <a href="../Variables.htm#ThisFunc">A_ThisFunc</a></p>

<h2 id="Examples">Examples</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Reports the number of mandatory parameters of a function.</p>
<pre>count := IsFunc("RegExReplace") <em>; Any function name can be used here.</em>
if count
    MsgBox "This function exists and has " count-1 " mandatory parameters."
else
    MsgBox "This function does not exist."</pre>
</div>

</body>
</html>
